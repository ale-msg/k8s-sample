##
##  k8s-sample -- Kubernetes Sample Application
##  Copyright (c) 2019 Dr. Ralf S. Engelschall <rse@engelschall.com>
##  Distributed under MIT license <https://spdx.org/licenses/MIT.html>
##

---
#   stateful set of pods (application tier)
apiVersion: apps/v1
kind: StatefulSet
metadata:
    namespace: {{ .Values.ns.name }}
    name: {{ .Values.app.name }}
    labels:
        app: {{ .Values.id }}
        tier: app
spec:
    selector:
        matchLabels:
            app: {{ .Values.id }}
            tier: app
    serviceName: {{ .Values.app.name }}
    replicas: {{ .Values.app.container.replicas }}
    template:
        metadata:
            labels:
                app: {{ .Values.id }}
                tier: app
        spec:
            restartPolicy: {{ .Values.app.container.restart }}
            containers:
                -   name:  {{ .Values.app.name }}
                    image: {{ .Values.app.image.name }}:{{ .Values.app.image.tag }}
                    args:
                        {{- if .Values.db.enabled }}
                        {{- range .Values.app.container.args.db }}
                        -   {{ . | quote }}
                        {{- end }}
                        {{- else }}
                        {{- range .Values.app.container.args.default }}
                        -   {{ . | quote }}
                        {{- end }}
                        {{- end }}
                    env:
                        {{- range $key, $val := .Values.app.container.env }}
                        -   name:  {{ $key | quote }}
                            value: {{ $val | quote }}
                        {{- end }}
                    ports:
                        -   name: default
                            protocol: {{ .Values.app.service.type }}
                            containerPort: {{ .Values.app.service.port }}
                    volumeMounts:
                        -   name: {{ .Values.app.name }}
                            mountPath: {{ .Values.app.storage.path }}
            {{- if .Values.app.storage.shared }}
            volumes:
                -   name: {{ .Values.app.name }}
                    persistentVolumeClaim:
                        claimName: {{ .Values.app.name }}
            {{- end }}
    {{- if not .Values.app.storage.shared }}
    volumeClaimTemplates:
        -   metadata:
                namespace: {{ .Values.ns.name }}
                name: {{ .Values.app.name }}
                labels:
                    app: {{ .Values.id }}
                    tier: app
            spec:
                accessModes:
                    - ReadWriteOnce
                volumeMode: Filesystem
                storageClassName: {{ .Values.app.storage.type }}
                resources:
                    requests:
                        storage: {{ .Values.app.storage.size }}
    {{- end }}

---
{{- if .Values.db.enabled }}
#   stateful set of pods (database tier)
apiVersion: apps/v1
kind: StatefulSet
metadata:
    namespace: {{ .Values.ns.name }}
    name: {{ .Values.db.name }}
    labels:
        app: {{ .Values.id }}
        tier: db
spec:
    selector:
        matchLabels:
            app: {{ .Values.id }}
            tier: db
    serviceName: {{ .Values.db.name }}
    replicas: {{ .Values.db.container.replicas }}
    template:
        metadata:
            labels:
                app: {{ .Values.id }}
                tier: db
        spec:
            restartPolicy: {{ .Values.db.container.restart }}
            containers:
                -   name:  {{ .Values.db.name }}
                    image: {{ .Values.db.image.name }}:{{ .Values.db.image.tag }}
                    args:
                        {{- range .Values.db.container.args }}
                        -   {{ . | quote }}
                        {{- end }}
                    env:
                        {{- range $key, $val := .Values.db.container.env }}
                        -   name:  {{ $key | quote }}
                            value: {{ $val | quote }}
                        {{- end }}
                    ports:
                        -   name: default
                            protocol: {{ .Values.db.service.type }}
                            containerPort: {{ .Values.db.service.port }}
                    volumeMounts:
                        -   name: {{ .Values.db.name }}
                            mountPath: {{ .Values.db.storage.path }}
            {{- if .Values.app.storage.shared }}
            volumes:
                -   name: {{ .Values.db.name }}
                    persistentVolumeClaim:
                        claimName: {{ .Values.db.name }}
            {{- end }}
    {{- if not .Values.db.storage.shared }}
    volumeClaimTemplates:
        -   metadata:
                namespace: {{ .Values.ns.name }}
                name: {{ .Values.db.name }}
                labels:
                    app: {{ .Values.id }}
                    tier: db
            spec:
                accessModes:
                    - ReadWriteOnce
                volumeMode: Filesystem
                storageClassName: {{ .Values.db.storage.type }}
                resources:
                    requests:
                        storage: {{ .Values.db.storage.size }}
    {{- end }}
{{- end }}

